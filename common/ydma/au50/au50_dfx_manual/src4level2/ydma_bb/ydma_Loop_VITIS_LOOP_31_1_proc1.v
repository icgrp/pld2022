// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ydma_Loop_VITIS_LOOP_31_1_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        config_size,
        input1,
        m_axi_aximm1_AWVALID,
        m_axi_aximm1_AWREADY,
        m_axi_aximm1_AWADDR,
        m_axi_aximm1_AWID,
        m_axi_aximm1_AWLEN,
        m_axi_aximm1_AWSIZE,
        m_axi_aximm1_AWBURST,
        m_axi_aximm1_AWLOCK,
        m_axi_aximm1_AWCACHE,
        m_axi_aximm1_AWPROT,
        m_axi_aximm1_AWQOS,
        m_axi_aximm1_AWREGION,
        m_axi_aximm1_AWUSER,
        m_axi_aximm1_WVALID,
        m_axi_aximm1_WREADY,
        m_axi_aximm1_WDATA,
        m_axi_aximm1_WSTRB,
        m_axi_aximm1_WLAST,
        m_axi_aximm1_WID,
        m_axi_aximm1_WUSER,
        m_axi_aximm1_ARVALID,
        m_axi_aximm1_ARREADY,
        m_axi_aximm1_ARADDR,
        m_axi_aximm1_ARID,
        m_axi_aximm1_ARLEN,
        m_axi_aximm1_ARSIZE,
        m_axi_aximm1_ARBURST,
        m_axi_aximm1_ARLOCK,
        m_axi_aximm1_ARCACHE,
        m_axi_aximm1_ARPROT,
        m_axi_aximm1_ARQOS,
        m_axi_aximm1_ARREGION,
        m_axi_aximm1_ARUSER,
        m_axi_aximm1_RVALID,
        m_axi_aximm1_RREADY,
        m_axi_aximm1_RDATA,
        m_axi_aximm1_RLAST,
        m_axi_aximm1_RID,
        m_axi_aximm1_RUSER,
        m_axi_aximm1_RRESP,
        m_axi_aximm1_BVALID,
        m_axi_aximm1_BREADY,
        m_axi_aximm1_BRESP,
        m_axi_aximm1_BID,
        m_axi_aximm1_BUSER,
        v1_buffer_V_din,
        v1_buffer_V_full_n,
        v1_buffer_V_write,
        config_size_c_din,
        config_size_c_full_n,
        config_size_c_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] config_size;
input  [63:0] input1;
output   m_axi_aximm1_AWVALID;
input   m_axi_aximm1_AWREADY;
output  [63:0] m_axi_aximm1_AWADDR;
output  [0:0] m_axi_aximm1_AWID;
output  [31:0] m_axi_aximm1_AWLEN;
output  [2:0] m_axi_aximm1_AWSIZE;
output  [1:0] m_axi_aximm1_AWBURST;
output  [1:0] m_axi_aximm1_AWLOCK;
output  [3:0] m_axi_aximm1_AWCACHE;
output  [2:0] m_axi_aximm1_AWPROT;
output  [3:0] m_axi_aximm1_AWQOS;
output  [3:0] m_axi_aximm1_AWREGION;
output  [0:0] m_axi_aximm1_AWUSER;
output   m_axi_aximm1_WVALID;
input   m_axi_aximm1_WREADY;
output  [63:0] m_axi_aximm1_WDATA;
output  [7:0] m_axi_aximm1_WSTRB;
output   m_axi_aximm1_WLAST;
output  [0:0] m_axi_aximm1_WID;
output  [0:0] m_axi_aximm1_WUSER;
output   m_axi_aximm1_ARVALID;
input   m_axi_aximm1_ARREADY;
output  [63:0] m_axi_aximm1_ARADDR;
output  [0:0] m_axi_aximm1_ARID;
output  [31:0] m_axi_aximm1_ARLEN;
output  [2:0] m_axi_aximm1_ARSIZE;
output  [1:0] m_axi_aximm1_ARBURST;
output  [1:0] m_axi_aximm1_ARLOCK;
output  [3:0] m_axi_aximm1_ARCACHE;
output  [2:0] m_axi_aximm1_ARPROT;
output  [3:0] m_axi_aximm1_ARQOS;
output  [3:0] m_axi_aximm1_ARREGION;
output  [0:0] m_axi_aximm1_ARUSER;
input   m_axi_aximm1_RVALID;
output   m_axi_aximm1_RREADY;
input  [63:0] m_axi_aximm1_RDATA;
input   m_axi_aximm1_RLAST;
input  [0:0] m_axi_aximm1_RID;
input  [0:0] m_axi_aximm1_RUSER;
input  [1:0] m_axi_aximm1_RRESP;
input   m_axi_aximm1_BVALID;
output   m_axi_aximm1_BREADY;
input  [1:0] m_axi_aximm1_BRESP;
input  [0:0] m_axi_aximm1_BID;
input  [0:0] m_axi_aximm1_BUSER;
output  [63:0] v1_buffer_V_din;
input   v1_buffer_V_full_n;
output   v1_buffer_V_write;
output  [31:0] config_size_c_din;
input   config_size_c_full_n;
output   config_size_c_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_aximm1_ARVALID;
reg m_axi_aximm1_RREADY;
reg v1_buffer_V_write;
reg config_size_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    config_size_c_blk_n;
reg   [60:0] trunc_ln321_4_reg_103;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_idle;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ready;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWADDR;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWID;
wire   [31:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWLEN;
wire   [2:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWSIZE;
wire   [1:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWBURST;
wire   [1:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWLOCK;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWCACHE;
wire   [2:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWPROT;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWQOS;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWREGION;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWUSER;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WDATA;
wire   [7:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WSTRB;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WLAST;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WID;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WUSER;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARVALID;
wire   [63:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARADDR;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARID;
wire   [31:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLEN;
wire   [2:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARSIZE;
wire   [1:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARBURST;
wire   [1:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLOCK;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARCACHE;
wire   [2:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARPROT;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARQOS;
wire   [3:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARREGION;
wire   [0:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARUSER;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_RREADY;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_BREADY;
wire   [63:0] grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_din;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_write;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ext_blocking_n;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_str_blocking_n;
wire    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_int_blocking_n;
reg    grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg = 1'b0;
end

ydma_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1 grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start),
    .ap_done(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done),
    .ap_idle(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_idle),
    .ap_ready(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ready),
    .m_axi_aximm1_AWVALID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWVALID),
    .m_axi_aximm1_AWREADY(1'b0),
    .m_axi_aximm1_AWADDR(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWADDR),
    .m_axi_aximm1_AWID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWID),
    .m_axi_aximm1_AWLEN(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWLEN),
    .m_axi_aximm1_AWSIZE(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWSIZE),
    .m_axi_aximm1_AWBURST(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWBURST),
    .m_axi_aximm1_AWLOCK(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWLOCK),
    .m_axi_aximm1_AWCACHE(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWCACHE),
    .m_axi_aximm1_AWPROT(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWPROT),
    .m_axi_aximm1_AWQOS(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWQOS),
    .m_axi_aximm1_AWREGION(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWREGION),
    .m_axi_aximm1_AWUSER(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_AWUSER),
    .m_axi_aximm1_WVALID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WVALID),
    .m_axi_aximm1_WREADY(1'b0),
    .m_axi_aximm1_WDATA(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WDATA),
    .m_axi_aximm1_WSTRB(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WSTRB),
    .m_axi_aximm1_WLAST(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WLAST),
    .m_axi_aximm1_WID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WID),
    .m_axi_aximm1_WUSER(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_WUSER),
    .m_axi_aximm1_ARVALID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARVALID),
    .m_axi_aximm1_ARREADY(m_axi_aximm1_ARREADY),
    .m_axi_aximm1_ARADDR(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARADDR),
    .m_axi_aximm1_ARID(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARID),
    .m_axi_aximm1_ARLEN(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLEN),
    .m_axi_aximm1_ARSIZE(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARSIZE),
    .m_axi_aximm1_ARBURST(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARBURST),
    .m_axi_aximm1_ARLOCK(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLOCK),
    .m_axi_aximm1_ARCACHE(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARCACHE),
    .m_axi_aximm1_ARPROT(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARPROT),
    .m_axi_aximm1_ARQOS(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARQOS),
    .m_axi_aximm1_ARREGION(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARREGION),
    .m_axi_aximm1_ARUSER(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARUSER),
    .m_axi_aximm1_RVALID(m_axi_aximm1_RVALID),
    .m_axi_aximm1_RREADY(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_RREADY),
    .m_axi_aximm1_RDATA(m_axi_aximm1_RDATA),
    .m_axi_aximm1_RLAST(m_axi_aximm1_RLAST),
    .m_axi_aximm1_RID(m_axi_aximm1_RID),
    .m_axi_aximm1_RUSER(m_axi_aximm1_RUSER),
    .m_axi_aximm1_RRESP(m_axi_aximm1_RRESP),
    .m_axi_aximm1_BVALID(1'b0),
    .m_axi_aximm1_BREADY(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_BREADY),
    .m_axi_aximm1_BRESP(2'd0),
    .m_axi_aximm1_BID(1'd0),
    .m_axi_aximm1_BUSER(1'd0),
    .sext_ln321_4(trunc_ln321_4_reg_103),
    .config_size(config_size),
    .input1(input1),
    .v1_buffer_V_din(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_din),
    .v1_buffer_V_full_n(v1_buffer_V_full_n),
    .v1_buffer_V_write(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_write),
    .ap_ext_blocking_n(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_str_blocking_n),
    .ap_int_blocking_n(grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ready == 1'b1)) begin
            grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln321_4_reg_103 <= {{input1[63:3]}};
    end
end

always @ (*) begin
    if (((config_size_c_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_size_c_blk_n = config_size_c_full_n;
    end else begin
        config_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((config_size_c_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_size_c_write = 1'b1;
    end else begin
        config_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_aximm1_ARVALID = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARVALID;
    end else begin
        m_axi_aximm1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_aximm1_RREADY = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_RREADY;
    end else begin
        m_axi_aximm1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v1_buffer_V_write = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_write;
    end else begin
        v1_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((config_size_c_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((config_size_c_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = config_size_c_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign config_size_c_din = config_size;

assign grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_ap_start_reg;

assign m_axi_aximm1_ARADDR = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARADDR;

assign m_axi_aximm1_ARBURST = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARBURST;

assign m_axi_aximm1_ARCACHE = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARCACHE;

assign m_axi_aximm1_ARID = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARID;

assign m_axi_aximm1_ARLEN = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLEN;

assign m_axi_aximm1_ARLOCK = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARLOCK;

assign m_axi_aximm1_ARPROT = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARPROT;

assign m_axi_aximm1_ARQOS = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARQOS;

assign m_axi_aximm1_ARREGION = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARREGION;

assign m_axi_aximm1_ARSIZE = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARSIZE;

assign m_axi_aximm1_ARUSER = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_m_axi_aximm1_ARUSER;

assign m_axi_aximm1_AWADDR = 64'd0;

assign m_axi_aximm1_AWBURST = 2'd0;

assign m_axi_aximm1_AWCACHE = 4'd0;

assign m_axi_aximm1_AWID = 1'd0;

assign m_axi_aximm1_AWLEN = 32'd0;

assign m_axi_aximm1_AWLOCK = 2'd0;

assign m_axi_aximm1_AWPROT = 3'd0;

assign m_axi_aximm1_AWQOS = 4'd0;

assign m_axi_aximm1_AWREGION = 4'd0;

assign m_axi_aximm1_AWSIZE = 3'd0;

assign m_axi_aximm1_AWUSER = 1'd0;

assign m_axi_aximm1_AWVALID = 1'b0;

assign m_axi_aximm1_BREADY = 1'b0;

assign m_axi_aximm1_WDATA = 64'd0;

assign m_axi_aximm1_WID = 1'd0;

assign m_axi_aximm1_WLAST = 1'b0;

assign m_axi_aximm1_WSTRB = 8'd0;

assign m_axi_aximm1_WUSER = 1'd0;

assign m_axi_aximm1_WVALID = 1'b0;

assign v1_buffer_V_din = grp_Loop_VITIS_LOOP_31_1_proc1_Pipeline_VITIS_LOOP_31_1_fu_72_v1_buffer_V_din;

endmodule //ydma_Loop_VITIS_LOOP_31_1_proc1
