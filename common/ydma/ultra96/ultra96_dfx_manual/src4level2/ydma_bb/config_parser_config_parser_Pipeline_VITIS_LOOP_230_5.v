// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module config_parser_config_parser_Pipeline_VITIS_LOOP_230_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output2_V_TREADY,
        tmp_3,
        output2_V_TDATA,
        output2_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   output2_V_TREADY;
input  [511:0] tmp_3;
output  [31:0] output2_V_TDATA;
output   output2_V_TVALID;

reg ap_idle;
reg output2_V_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln230_fu_73_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    output2_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] trunc_ln397_fu_201_p1;
reg   [31:0] trunc_ln397_reg_220;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] j_fu_48;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_1;
wire   [4:0] j_2_fu_79_p2;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] trunc_ln232_fu_85_p1;
wire   [8:0] shl_ln_fu_89_p3;
wire   [8:0] or_ln232_fu_97_p2;
wire   [9:0] zext_ln674_fu_109_p1;
wire   [9:0] zext_ln674_1_fu_113_p1;
wire   [0:0] icmp_ln674_fu_103_p2;
wire   [9:0] sub_ln674_fu_127_p2;
wire   [9:0] sub_ln674_1_fu_139_p2;
reg   [511:0] tmp_fu_117_p4;
wire   [9:0] xor_ln674_fu_133_p2;
wire   [9:0] select_ln674_fu_145_p3;
wire   [9:0] select_ln674_2_fu_161_p3;
wire   [9:0] sub_ln674_2_fu_169_p2;
wire   [511:0] select_ln674_1_fu_153_p3;
wire   [511:0] zext_ln674_2_fu_175_p1;
wire   [511:0] zext_ln674_3_fu_179_p1;
wire   [511:0] lshr_ln674_fu_183_p2;
wire   [511:0] lshr_ln674_1_fu_189_p2;
wire   [511:0] p_Result_s_fu_195_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

config_parser_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln230_fu_73_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= j_2_fu_79_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_73_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln397_reg_220 <= trunc_ln397_fu_201_p1;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_73_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output2_V_TDATA_blk_n = output2_V_TREADY;
    end else begin
        output2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output2_V_TVALID = 1'b1;
    end else begin
        output2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((output2_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((output2_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((output2_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (output2_V_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln230_fu_73_p2 = ((ap_sig_allocacmp_j_1 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_103_p2 = ((shl_ln_fu_89_p3 > or_ln232_fu_97_p2) ? 1'b1 : 1'b0);

assign j_2_fu_79_p2 = (ap_sig_allocacmp_j_1 + 5'd1);

assign lshr_ln674_1_fu_189_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_3_fu_179_p1;

assign lshr_ln674_fu_183_p2 = select_ln674_1_fu_153_p3 >> zext_ln674_2_fu_175_p1;

assign or_ln232_fu_97_p2 = (shl_ln_fu_89_p3 | 9'd31);

assign output2_V_TDATA = trunc_ln397_reg_220;

assign p_Result_s_fu_195_p2 = (lshr_ln674_fu_183_p2 & lshr_ln674_1_fu_189_p2);

assign select_ln674_1_fu_153_p3 = ((icmp_ln674_fu_103_p2[0:0] == 1'b1) ? tmp_fu_117_p4 : tmp_3);

assign select_ln674_2_fu_161_p3 = ((icmp_ln674_fu_103_p2[0:0] == 1'b1) ? xor_ln674_fu_133_p2 : zext_ln674_fu_109_p1);

assign select_ln674_fu_145_p3 = ((icmp_ln674_fu_103_p2[0:0] == 1'b1) ? sub_ln674_fu_127_p2 : sub_ln674_1_fu_139_p2);

assign shl_ln_fu_89_p3 = {{trunc_ln232_fu_85_p1}, {5'd0}};

assign sub_ln674_1_fu_139_p2 = (zext_ln674_1_fu_113_p1 - zext_ln674_fu_109_p1);

assign sub_ln674_2_fu_169_p2 = (10'd511 - select_ln674_fu_145_p3);

assign sub_ln674_fu_127_p2 = (zext_ln674_fu_109_p1 - zext_ln674_1_fu_113_p1);

integer ap_tvar_int_0;

always @ (tmp_3) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_fu_117_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_117_p4[ap_tvar_int_0] = tmp_3[511 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln232_fu_85_p1 = ap_sig_allocacmp_j_1[3:0];

assign trunc_ln397_fu_201_p1 = p_Result_s_fu_195_p2[31:0];

assign xor_ln674_fu_133_p2 = (zext_ln674_fu_109_p1 ^ 10'd511);

assign zext_ln674_1_fu_113_p1 = or_ln232_fu_97_p2;

assign zext_ln674_2_fu_175_p1 = select_ln674_2_fu_161_p3;

assign zext_ln674_3_fu_179_p1 = sub_ln674_2_fu_169_p2;

assign zext_ln674_fu_109_p1 = shl_ln_fu_89_p3;

endmodule //config_parser_config_parser_Pipeline_VITIS_LOOP_230_5
